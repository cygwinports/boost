--- origsrc/boost_1_66_0/boost/asio/detail/buffer_sequence_adapter.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/buffer_sequence_adapter.hpp	2018-04-08 23:04:01.715626300 -0500
@@ -43,7 +43,7 @@ protected:
   BOOST_ASIO_DECL static void init_native_buffer(
       native_buffer_type& buf,
       const boost::asio::const_buffer& buffer);
-#elif defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#elif defined(BOOST_ASIO_WINDOWS)
 public:
   // The maximum number of buffers to support in a single operation.
   enum { max_buffers = 64 < max_iov_len ? 64 : max_iov_len };
@@ -64,7 +64,7 @@ protected:
     buf.buf = const_cast<char*>(static_cast<const char*>(buffer.data()));
     buf.len = static_cast<ULONG>(buffer.size());
   }
-#else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#else // defined(BOOST_ASIO_WINDOWS)
 public:
   // The maximum number of buffers to support in a single operation.
   enum { max_buffers = 64 < max_iov_len ? 64 : max_iov_len };
@@ -96,7 +96,7 @@ protected:
     init_iov_base(iov.iov_base, const_cast<void*>(buffer.data()));
     iov.iov_len = buffer.size();
   }
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 };
 
 // Helper class to translate buffers into the native buffer representation.
--- origsrc/boost_1_66_0/boost/asio/detail/config.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/config.hpp	2018-04-08 23:08:14.438573700 -0500
@@ -853,7 +853,7 @@
 #endif // !defined(BOOST_ASIO_WINDOWS)
 
 // Windows: target OS version.
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
 # if !defined(_WIN32_WINNT) && !defined(_WIN32_WINDOWS)
 #  if defined(_MSC_VER) || defined(__BORLANDC__)
 #   pragma message( \
@@ -891,29 +891,29 @@
 #   error You must add -D__USE_W32_SOCKETS to your compiler options.
 #  endif // !defined(__USE_W32_SOCKETS)
 # endif // defined(__CYGWIN__)
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 
 // Windows: minimise header inclusion.
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
 # if !defined(BOOST_ASIO_NO_WIN32_LEAN_AND_MEAN)
 #  if !defined(WIN32_LEAN_AND_MEAN)
 #   define WIN32_LEAN_AND_MEAN
 #  endif // !defined(WIN32_LEAN_AND_MEAN)
 # endif // !defined(BOOST_ASIO_NO_WIN32_LEAN_AND_MEAN)
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 
 // Windows: suppress definition of "min" and "max" macros.
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
 # if !defined(BOOST_ASIO_NO_NOMINMAX)
 #  if !defined(NOMINMAX)
 #   define NOMINMAX 1
 #  endif // !defined(NOMINMAX)
 # endif // !defined(BOOST_ASIO_NO_NOMINMAX)
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 
 // Windows: IO Completion Ports.
 #if !defined(BOOST_ASIO_HAS_IOCP)
-# if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+# if defined(BOOST_ASIO_WINDOWS)
 #  if defined(_WIN32_WINNT) && (_WIN32_WINNT >= 0x0400)
 #   if !defined(UNDER_CE) && !defined(BOOST_ASIO_WINDOWS_APP)
 #    if !defined(BOOST_ASIO_DISABLE_IOCP)
@@ -921,7 +921,7 @@
 #    endif // !defined(BOOST_ASIO_DISABLE_IOCP)
 #   endif // !defined(UNDER_CE) && !defined(BOOST_ASIO_WINDOWS_APP)
 #  endif // defined(_WIN32_WINNT) && (_WIN32_WINNT >= 0x0400)
-# endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+# endif // defined(BOOST_ASIO_WINDOWS)
 #endif // !defined(BOOST_ASIO_HAS_IOCP)
 
 // On POSIX (and POSIX-like) platforms we need to include unistd.h in order to
@@ -1000,8 +1000,7 @@
 #if !defined(BOOST_ASIO_HAS_SERIAL_PORT)
 # if defined(BOOST_ASIO_HAS_IOCP) \
   || !defined(BOOST_ASIO_WINDOWS) \
-  && !defined(BOOST_ASIO_WINDOWS_RUNTIME) \
-  && !defined(__CYGWIN__)
+  && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
 #  if !defined(__SYMBIAN32__)
 #   if !defined(BOOST_ASIO_DISABLE_SERIAL_PORT)
 #    define BOOST_ASIO_HAS_SERIAL_PORT 1
@@ -1010,7 +1009,6 @@
 # endif // defined(BOOST_ASIO_HAS_IOCP)
         //   || !defined(BOOST_ASIO_WINDOWS)
         //   && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
-        //   && !defined(__CYGWIN__)
 #endif // !defined(BOOST_ASIO_HAS_SERIAL_PORT)
 
 // Windows: stream handles.
@@ -1034,11 +1032,11 @@
 // Windows: object handles.
 #if !defined(BOOST_ASIO_HAS_WINDOWS_OBJECT_HANDLE)
 # if !defined(BOOST_ASIO_DISABLE_WINDOWS_OBJECT_HANDLE)
-#  if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#  if defined(BOOST_ASIO_WINDOWS)
 #   if !defined(UNDER_CE) && !defined(BOOST_ASIO_WINDOWS_APP)
 #    define BOOST_ASIO_HAS_WINDOWS_OBJECT_HANDLE 1
 #   endif // !defined(UNDER_CE) && !defined(BOOST_ASIO_WINDOWS_APP)
-#  endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#  endif // defined(BOOST_ASIO_WINDOWS)
 # endif // !defined(BOOST_ASIO_DISABLE_WINDOWS_OBJECT_HANDLE)
 #endif // !defined(BOOST_ASIO_HAS_WINDOWS_OBJECT_HANDLE)
 
@@ -1055,12 +1053,10 @@
 #if !defined(BOOST_ASIO_HAS_POSIX_STREAM_DESCRIPTOR)
 # if !defined(BOOST_ASIO_DISABLE_POSIX_STREAM_DESCRIPTOR)
 #  if !defined(BOOST_ASIO_WINDOWS) \
-  && !defined(BOOST_ASIO_WINDOWS_RUNTIME) \
-  && !defined(__CYGWIN__)
+  && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
 #   define BOOST_ASIO_HAS_POSIX_STREAM_DESCRIPTOR 1
 #  endif // !defined(BOOST_ASIO_WINDOWS)
          //   && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
-         //   && !defined(__CYGWIN__)
 # endif // !defined(BOOST_ASIO_DISABLE_POSIX_STREAM_DESCRIPTOR)
 #endif // !defined(BOOST_ASIO_HAS_POSIX_STREAM_DESCRIPTOR)
 
@@ -1068,12 +1064,10 @@
 #if !defined(BOOST_ASIO_HAS_LOCAL_SOCKETS)
 # if !defined(BOOST_ASIO_DISABLE_LOCAL_SOCKETS)
 #  if !defined(BOOST_ASIO_WINDOWS) \
-  && !defined(BOOST_ASIO_WINDOWS_RUNTIME) \
-  && !defined(__CYGWIN__)
+  && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
 #   define BOOST_ASIO_HAS_LOCAL_SOCKETS 1
 #  endif // !defined(BOOST_ASIO_WINDOWS)
          //   && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
-         //   && !defined(__CYGWIN__)
 # endif // !defined(BOOST_ASIO_DISABLE_LOCAL_SOCKETS)
 #endif // !defined(BOOST_ASIO_HAS_LOCAL_SOCKETS)
 
@@ -1081,12 +1075,10 @@
 #if !defined(BOOST_ASIO_HAS_SIGACTION)
 # if !defined(BOOST_ASIO_DISABLE_SIGACTION)
 #  if !defined(BOOST_ASIO_WINDOWS) \
-  && !defined(BOOST_ASIO_WINDOWS_RUNTIME) \
-  && !defined(__CYGWIN__)
+  && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
 #   define BOOST_ASIO_HAS_SIGACTION 1
 #  endif // !defined(BOOST_ASIO_WINDOWS)
          //   && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
-         //   && !defined(__CYGWIN__)
 # endif // !defined(BOOST_ASIO_DISABLE_SIGACTION)
 #endif // !defined(BOOST_ASIO_HAS_SIGACTION)
 
@@ -1102,7 +1094,7 @@
 // Can use getaddrinfo() and getnameinfo().
 #if !defined(BOOST_ASIO_HAS_GETADDRINFO)
 # if !defined(BOOST_ASIO_DISABLE_GETADDRINFO)
-#  if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#  if defined(BOOST_ASIO_WINDOWS)
 #   if defined(_WIN32_WINNT) && (_WIN32_WINNT >= 0x0501)
 #    define BOOST_ASIO_HAS_GETADDRINFO 1
 #   elif defined(UNDER_CE)
--- origsrc/boost_1_66_0/boost/asio/detail/descriptor_ops.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/descriptor_ops.hpp	2018-04-08 23:08:14.460711200 -0500
@@ -18,8 +18,7 @@
 #include <boost/asio/detail/config.hpp>
 
 #if !defined(BOOST_ASIO_WINDOWS) \
-  && !defined(BOOST_ASIO_WINDOWS_RUNTIME) \
-  && !defined(__CYGWIN__)
+  && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
 
 #include <cstddef>
 #include <boost/asio/error.hpp>
@@ -118,6 +117,5 @@ BOOST_ASIO_DECL int poll_error(int d,
 
 #endif // !defined(BOOST_ASIO_WINDOWS)
        //   && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
-       //   && !defined(__CYGWIN__)
 
 #endif // BOOST_ASIO_DETAIL_DESCRIPTOR_OPS_HPP
--- origsrc/boost_1_66_0/boost/asio/detail/descriptor_read_op.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/descriptor_read_op.hpp	2018-04-08 23:08:14.476346500 -0500
@@ -17,7 +17,7 @@
 
 #include <boost/asio/detail/config.hpp>
 
-#if !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#if !defined(BOOST_ASIO_WINDOWS)
 
 #include <boost/asio/detail/bind_handler.hpp>
 #include <boost/asio/detail/buffer_sequence_adapter.hpp>
@@ -125,6 +125,6 @@ private:
 
 #include <boost/asio/detail/pop_options.hpp>
 
-#endif // !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#endif // !defined(BOOST_ASIO_WINDOWS)
 
 #endif // BOOST_ASIO_DETAIL_DESCRIPTOR_READ_OP_HPP
--- origsrc/boost_1_66_0/boost/asio/detail/descriptor_write_op.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/descriptor_write_op.hpp	2018-04-08 23:08:14.476346500 -0500
@@ -17,7 +17,7 @@
 
 #include <boost/asio/detail/config.hpp>
 
-#if !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#if !defined(BOOST_ASIO_WINDOWS)
 
 #include <boost/asio/detail/bind_handler.hpp>
 #include <boost/asio/detail/buffer_sequence_adapter.hpp>
@@ -125,6 +125,6 @@ private:
 
 #include <boost/asio/detail/pop_options.hpp>
 
-#endif // !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#endif // !defined(BOOST_ASIO_WINDOWS)
 
 #endif // BOOST_ASIO_DETAIL_DESCRIPTOR_WRITE_OP_HPP
--- origsrc/boost_1_66_0/boost/asio/detail/fd_set_adapter.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/fd_set_adapter.hpp	2018-04-08 23:08:14.476346500 -0500
@@ -26,7 +26,7 @@ namespace boost {
 namespace asio {
 namespace detail {
 
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
 typedef win_fd_set_adapter fd_set_adapter;
 #else
 typedef posix_fd_set_adapter fd_set_adapter;
--- origsrc/boost_1_66_0/boost/asio/detail/hash_map.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/hash_map.hpp	2018-04-08 23:08:14.491976000 -0500
@@ -21,9 +21,9 @@
 #include <boost/asio/detail/assert.hpp>
 #include <boost/asio/detail/noncopyable.hpp>
 
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
 # include <boost/asio/detail/socket_types.hpp>
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 
 #include <boost/asio/detail/push_options.hpp>
 
@@ -42,12 +42,12 @@ inline std::size_t calculate_hash_value(
     + (reinterpret_cast<std::size_t>(p) >> 3);
 }
 
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
 inline std::size_t calculate_hash_value(SOCKET s)
 {
   return static_cast<std::size_t>(s);
 }
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 
 // Note: assumes K and V are POD types.
 template <typename K, typename V>
--- origsrc/boost_1_66_0/boost/asio/detail/impl/descriptor_ops.ipp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/impl/descriptor_ops.ipp	2018-04-08 23:08:14.507596100 -0500
@@ -21,8 +21,7 @@
 #include <boost/asio/error.hpp>
 
 #if !defined(BOOST_ASIO_WINDOWS) \
-  && !defined(BOOST_ASIO_WINDOWS_RUNTIME) \
-  && !defined(__CYGWIN__)
+  && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
 
 #include <boost/asio/detail/push_options.hpp>
 
@@ -471,6 +470,5 @@ int poll_error(int d, state_type state,
 
 #endif // !defined(BOOST_ASIO_WINDOWS)
        //   && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
-       //   && !defined(__CYGWIN__)
 
 #endif // BOOST_ASIO_DETAIL_IMPL_DESCRIPTOR_OPS_IPP
--- origsrc/boost_1_66_0/boost/asio/detail/impl/null_event.ipp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/impl/null_event.ipp	2018-04-08 23:09:17.150953300 -0500
@@ -19,7 +19,7 @@
 
 #if defined(BOOST_ASIO_WINDOWS_RUNTIME)
 # include <thread>
-#elif defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#elif defined(BOOST_ASIO_WINDOWS)
 # include <boost/asio/detail/socket_types.hpp>
 #else
 # include <unistd.h>
@@ -41,7 +41,7 @@ void null_event::do_wait()
 {
 #if defined(BOOST_ASIO_WINDOWS_RUNTIME)
   std::this_thread::sleep_until((std::chrono::steady_clock::time_point::max)());
-#elif defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#elif defined(BOOST_ASIO_WINDOWS)
   ::Sleep(INFINITE);
 #else
   ::pause();
@@ -52,7 +52,7 @@ void null_event::do_wait_for_usec(long u
 {
 #if defined(BOOST_ASIO_WINDOWS_RUNTIME)
   std::this_thread::sleep_for(std::chrono::microseconds(usec));
-#elif defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#elif defined(BOOST_ASIO_WINDOWS)
   ::Sleep(usec / 1000);
 #elif defined(__hpux) && defined(__SELECT)
   timespec ts;
--- origsrc/boost_1_66_0/boost/asio/detail/impl/pipe_select_interrupter.ipp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/impl/pipe_select_interrupter.ipp	2018-04-08 23:08:14.507596100 -0500
@@ -19,7 +19,6 @@
 
 #if !defined(BOOST_ASIO_WINDOWS_RUNTIME)
 #if !defined(BOOST_ASIO_WINDOWS)
-#if !defined(__CYGWIN__)
 #if !defined(__SYMBIAN32__)
 #if !defined(BOOST_ASIO_HAS_EVENTFD)
 
@@ -119,7 +118,6 @@ bool pipe_select_interrupter::reset()
 
 #endif // !defined(BOOST_ASIO_HAS_EVENTFD)
 #endif // !defined(__SYMBIAN32__)
-#endif // !defined(__CYGWIN__)
 #endif // !defined(BOOST_ASIO_WINDOWS)
 #endif // !defined(BOOST_ASIO_WINDOWS_RUNTIME)
 
--- origsrc/boost_1_66_0/boost/asio/detail/impl/reactive_descriptor_service.ipp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/impl/reactive_descriptor_service.ipp	2018-04-08 23:08:14.507596100 -0500
@@ -18,8 +18,7 @@
 #include <boost/asio/detail/config.hpp>
 
 #if !defined(BOOST_ASIO_WINDOWS) \
-  && !defined(BOOST_ASIO_WINDOWS_RUNTIME) \
-  && !defined(__CYGWIN__)
+  && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
 
 #include <boost/asio/error.hpp>
 #include <boost/asio/detail/reactive_descriptor_service.hpp>
@@ -219,6 +218,5 @@ void reactive_descriptor_service::start_
 
 #endif // !defined(BOOST_ASIO_WINDOWS)
        //   && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
-       //   && !defined(__CYGWIN__)
 
 #endif // BOOST_ASIO_DETAIL_IMPL_REACTIVE_DESCRIPTOR_SERVICE_IPP
--- origsrc/boost_1_66_0/boost/asio/detail/impl/reactive_serial_port_service.ipp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/impl/reactive_serial_port_service.ipp	2018-04-08 23:08:14.523220700 -0500
@@ -19,7 +19,7 @@
 #include <boost/asio/detail/config.hpp>
 
 #if defined(BOOST_ASIO_HAS_SERIAL_PORT)
-#if !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#if !defined(BOOST_ASIO_WINDOWS)
 
 #include <cstring>
 #include <boost/asio/detail/reactive_serial_port_service.hpp>
@@ -148,7 +148,7 @@ boost::system::error_code reactive_seria
 
 #include <boost/asio/detail/pop_options.hpp>
 
-#endif // !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#endif // !defined(BOOST_ASIO_WINDOWS)
 #endif // defined(BOOST_ASIO_HAS_SERIAL_PORT)
 
 #endif // BOOST_ASIO_DETAIL_IMPL_REACTIVE_SERIAL_PORT_SERVICE_IPP
--- origsrc/boost_1_66_0/boost/asio/detail/impl/select_reactor.ipp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/impl/select_reactor.ipp	2018-04-08 23:08:14.523220700 -0500
@@ -210,7 +210,7 @@ void select_reactor::run(long usec, op_q
       max_fd = fd_sets_[i].max_descriptor();
   }
 
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   // Connection operations on Windows use both except and write fd_sets.
   have_work_to_do = have_work_to_do || !op_queue_[connect_op].empty();
   fd_sets_[write_op].set(op_queue_[connect_op], ops);
@@ -219,7 +219,7 @@ void select_reactor::run(long usec, op_q
   fd_sets_[except_op].set(op_queue_[connect_op], ops);
   if (fd_sets_[except_op].max_descriptor() > max_fd)
     max_fd = fd_sets_[except_op].max_descriptor();
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 
   // We can return immediately if there's no work to do and the reactor is
   // not supposed to block.
@@ -249,11 +249,11 @@ void select_reactor::run(long usec, op_q
   // Dispatch all ready operations.
   if (retval > 0)
   {
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
     // Connection operations on Windows use both except and write fd_sets.
     fd_sets_[except_op].perform(op_queue_[connect_op], ops);
     fd_sets_[write_op].perform(op_queue_[connect_op], ops);
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 
     // Exception operations must be processed first to ensure that any
     // out-of-band data is read before normal data.
--- origsrc/boost_1_66_0/boost/asio/detail/impl/signal_set_service.ipp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/impl/signal_set_service.ipp	2018-04-08 23:08:14.538846000 -0500
@@ -62,12 +62,10 @@ signal_state* get_signal_state()
 void boost_asio_signal_handler(int signal_number)
 {
 #if defined(BOOST_ASIO_WINDOWS) \
-  || defined(BOOST_ASIO_WINDOWS_RUNTIME) \
-  || defined(__CYGWIN__)
+  || defined(BOOST_ASIO_WINDOWS_RUNTIME)
   signal_set_service::deliver_signal(signal_number);
 #else // defined(BOOST_ASIO_WINDOWS)
       //   || defined(BOOST_ASIO_WINDOWS_RUNTIME)
-      //   || defined(__CYGWIN__)
   int saved_errno = errno;
   signal_state* state = get_signal_state();
   signed_size_type result = ::write(state->write_descriptor_,
@@ -76,7 +74,6 @@ void boost_asio_signal_handler(int signa
   errno = saved_errno;
 #endif // defined(BOOST_ASIO_WINDOWS)
        //   || defined(BOOST_ASIO_WINDOWS_RUNTIME)
-       //   || defined(__CYGWIN__)
 
 #if defined(BOOST_ASIO_HAS_SIGNAL) && !defined(BOOST_ASIO_HAS_SIGACTION)
   ::signal(signal_number, boost_asio_signal_handler);
@@ -84,8 +81,7 @@ void boost_asio_signal_handler(int signa
 }
 
 #if !defined(BOOST_ASIO_WINDOWS) \
-  && !defined(BOOST_ASIO_WINDOWS_RUNTIME) \
-  && !defined(__CYGWIN__)
+  && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
 class signal_set_service::pipe_read_op : public reactor_op
 {
 public:
@@ -117,31 +113,26 @@ public:
 };
 #endif // !defined(BOOST_ASIO_WINDOWS)
        //   && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
-       //   && !defined(__CYGWIN__)
 
 signal_set_service::signal_set_service(
     boost::asio::io_context& io_context)
   : service_base<signal_set_service>(io_context),
     io_context_(boost::asio::use_service<io_context_impl>(io_context)),
 #if !defined(BOOST_ASIO_WINDOWS) \
-  && !defined(BOOST_ASIO_WINDOWS_RUNTIME) \
-  && !defined(__CYGWIN__)
+  && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
     reactor_(boost::asio::use_service<reactor>(io_context)),
 #endif // !defined(BOOST_ASIO_WINDOWS)
        //   && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
-       //   && !defined(__CYGWIN__)
     next_(0),
     prev_(0)
 {
   get_signal_state()->mutex_.init();
 
 #if !defined(BOOST_ASIO_WINDOWS) \
-  && !defined(BOOST_ASIO_WINDOWS_RUNTIME) \
-  && !defined(__CYGWIN__)
+  && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
   reactor_.init_task();
 #endif // !defined(BOOST_ASIO_WINDOWS)
        //   && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
-       //   && !defined(__CYGWIN__)
 
   for (int i = 0; i < max_signal_number; ++i)
     registrations_[i] = 0;
@@ -177,8 +168,7 @@ void signal_set_service::notify_fork(
     boost::asio::io_context::fork_event fork_ev)
 {
 #if !defined(BOOST_ASIO_WINDOWS) \
-  && !defined(BOOST_ASIO_WINDOWS_RUNTIME) \
-  && !defined(__CYGWIN__)
+  && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
   signal_state* state = get_signal_state();
   static_mutex::scoped_lock lock(state->mutex_);
 
@@ -221,11 +211,9 @@ void signal_set_service::notify_fork(
   }
 #else // !defined(BOOST_ASIO_WINDOWS)
       //   && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
-      //   && !defined(__CYGWIN__)
   (void)fork_ev;
 #endif // !defined(BOOST_ASIO_WINDOWS)
        //   && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
-       //   && !defined(__CYGWIN__)
 }
 
 void signal_set_service::construct(
@@ -285,12 +273,12 @@ boost::system::error_code signal_set_ser
       if (::signal(signal_number, boost_asio_signal_handler) == SIG_ERR)
 # endif // defined(BOOST_ASIO_HAS_SIGACTION)
       {
-# if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+# if defined(BOOST_ASIO_WINDOWS)
         ec = boost::asio::error::invalid_argument;
-# else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+# else // defined(BOOST_ASIO_WINDOWS)
         ec = boost::system::error_code(errno,
             boost::asio::error::get_system_category());
-# endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+# endif // defined(BOOST_ASIO_WINDOWS)
         delete new_registration;
         return ec;
       }
@@ -355,12 +343,12 @@ boost::system::error_code signal_set_ser
       if (::signal(signal_number, SIG_DFL) == SIG_ERR)
 # endif // defined(BOOST_ASIO_HAS_SIGACTION)
       {
-# if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+# if defined(BOOST_ASIO_WINDOWS)
         ec = boost::asio::error::invalid_argument;
-# else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+# else // defined(BOOST_ASIO_WINDOWS)
         ec = boost::system::error_code(errno,
             boost::asio::error::get_system_category());
-# endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+# endif // defined(BOOST_ASIO_WINDOWS)
         return ec;
       }
     }
@@ -409,12 +397,12 @@ boost::system::error_code signal_set_ser
       if (::signal(reg->signal_number_, SIG_DFL) == SIG_ERR)
 # endif // defined(BOOST_ASIO_HAS_SIGACTION)
       {
-# if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+# if defined(BOOST_ASIO_WINDOWS)
         ec = boost::asio::error::invalid_argument;
-# else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+# else // defined(BOOST_ASIO_WINDOWS)
         ec = boost::system::error_code(errno,
             boost::asio::error::get_system_category());
-# endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+# endif // defined(BOOST_ASIO_WINDOWS)
         return ec;
       }
     }
@@ -505,11 +493,11 @@ void signal_set_service::add_service(sig
   signal_state* state = get_signal_state();
   static_mutex::scoped_lock lock(state->mutex_);
 
-#if !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#if !defined(BOOST_ASIO_WINDOWS)
   // If this is the first service to be created, open a new pipe.
   if (state->service_list_ == 0)
     open_descriptors();
-#endif // !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#endif // !defined(BOOST_ASIO_WINDOWS)
 
   // If an io_context object is thread-unsafe then it must be the only
   // io_context used to create signal_set objects.
@@ -535,8 +523,7 @@ void signal_set_service::add_service(sig
   state->service_list_ = service;
 
 #if !defined(BOOST_ASIO_WINDOWS) \
-  && !defined(BOOST_ASIO_WINDOWS_RUNTIME) \
-  && !defined(__CYGWIN__)
+  && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
   // Register for pipe readiness notifications.
   int read_descriptor = state->read_descriptor_;
   lock.unlock();
@@ -544,7 +531,6 @@ void signal_set_service::add_service(sig
       read_descriptor, service->reactor_data_, new pipe_read_op);
 #endif // !defined(BOOST_ASIO_WINDOWS)
        //   && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
-       //   && !defined(__CYGWIN__)
 }
 
 void signal_set_service::remove_service(signal_set_service* service)
@@ -555,8 +541,7 @@ void signal_set_service::remove_service(
   if (service->next_ || service->prev_ || state->service_list_ == service)
   {
 #if !defined(BOOST_ASIO_WINDOWS) \
-  && !defined(BOOST_ASIO_WINDOWS_RUNTIME) \
-  && !defined(__CYGWIN__)
+  && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
     // Disable the pipe readiness notifications.
     int read_descriptor = state->read_descriptor_;
     lock.unlock();
@@ -566,7 +551,6 @@ void signal_set_service::remove_service(
     lock.lock();
 #endif // !defined(BOOST_ASIO_WINDOWS)
        //   && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
-       //   && !defined(__CYGWIN__)
 
     // Remove service from linked list of all services.
     if (state->service_list_ == service)
@@ -578,19 +562,18 @@ void signal_set_service::remove_service(
     service->next_ = 0;
     service->prev_ = 0;
 
-#if !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#if !defined(BOOST_ASIO_WINDOWS)
     // If this is the last service to be removed, close the pipe.
     if (state->service_list_ == 0)
       close_descriptors();
-#endif // !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#endif // !defined(BOOST_ASIO_WINDOWS)
   }
 }
 
 void signal_set_service::open_descriptors()
 {
 #if !defined(BOOST_ASIO_WINDOWS) \
-  && !defined(BOOST_ASIO_WINDOWS_RUNTIME) \
-  && !defined(__CYGWIN__)
+  && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
   signal_state* state = get_signal_state();
 
   int pipe_fds[2];
@@ -615,14 +598,12 @@ void signal_set_service::open_descriptor
   }
 #endif // !defined(BOOST_ASIO_WINDOWS)
        //   && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
-       //   && !defined(__CYGWIN__)
 }
 
 void signal_set_service::close_descriptors()
 {
 #if !defined(BOOST_ASIO_WINDOWS) \
-  && !defined(BOOST_ASIO_WINDOWS_RUNTIME) \
-  && !defined(__CYGWIN__)
+  && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
   signal_state* state = get_signal_state();
 
   if (state->read_descriptor_ != -1)
@@ -634,7 +615,6 @@ void signal_set_service::close_descripto
   state->write_descriptor_ = -1;
 #endif // !defined(BOOST_ASIO_WINDOWS)
        //   && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
-       //   && !defined(__CYGWIN__)
 }
 
 void signal_set_service::start_wait_op(
--- origsrc/boost_1_66_0/boost/asio/detail/impl/socket_ops.ipp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/impl/socket_ops.ipp	2018-04-08 23:09:32.138105600 -0500
@@ -33,12 +33,12 @@
 # include <string>
 #endif // defined(BOOST_ASIO_WINDOWS_RUNTIME)
 
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__) \
+#if defined(BOOST_ASIO_WINDOWS) \
   || defined(__MACH__) && defined(__APPLE__)
 # if defined(BOOST_ASIO_HAS_PTHREADS)
 #  include <pthread.h>
 # endif // defined(BOOST_ASIO_HAS_PTHREADS)
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
        // || defined(__MACH__) && defined(__APPLE__)
 
 #include <boost/asio/detail/push_options.hpp>
@@ -50,9 +50,9 @@ namespace socket_ops {
 
 #if !defined(BOOST_ASIO_WINDOWS_RUNTIME)
 
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
 struct msghdr { int msg_namelen; };
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 
 #if defined(__hpux)
 // HP-UX doesn't declare these functions extern "C", so they are declared again
@@ -65,7 +65,7 @@ extern "C" unsigned int if_nametoindex(c
 
 inline void clear_last_error()
 {
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   WSASetLastError(0);
 #else
   errno = 0;
@@ -78,7 +78,7 @@ template <typename ReturnType>
 inline ReturnType error_wrapper(ReturnType return_value,
     boost::system::error_code& ec)
 {
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   ec = boost::system::error_code(WSAGetLastError(),
       boost::asio::error::get_system_category());
 #else
@@ -311,11 +311,11 @@ int close(socket_type s, state_type& sta
     }
 
     clear_last_error();
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
     result = error_wrapper(::closesocket(s), ec);
-#else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#else // defined(BOOST_ASIO_WINDOWS)
     result = error_wrapper(::close(s), ec);
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 
     if (result != 0
         && (ec == boost::asio::error::would_block
@@ -327,10 +327,10 @@ int close(socket_type s, state_type& sta
       // current OS where this behaviour is seen, Windows, says that the socket
       // remains open. Therefore we'll put the descriptor back into blocking
       // mode and have another attempt at closing it.
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
       ioctl_arg_type arg = 0;
       ::ioctlsocket(s, FIONBIO, &arg);
-#else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#else // defined(BOOST_ASIO_WINDOWS)
 # if defined(__SYMBIAN32__)
       int flags = ::fcntl(s, F_GETFL, 0);
       if (flags >= 0)
@@ -339,15 +339,15 @@ int close(socket_type s, state_type& sta
       ioctl_arg_type arg = 0;
       ::ioctl(s, FIONBIO, &arg);
 # endif // defined(__SYMBIAN32__)
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
       state &= ~non_blocking;
 
       clear_last_error();
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
       result = error_wrapper(::closesocket(s), ec);
-#else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#else // defined(BOOST_ASIO_WINDOWS)
       result = error_wrapper(::close(s), ec);
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
     }
   }
 
@@ -366,7 +366,7 @@ bool set_user_non_blocking(socket_type s
   }
 
   clear_last_error();
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   ioctl_arg_type arg = (value ? 1 : 0);
   int result = error_wrapper(::ioctlsocket(s, FIONBIO, &arg), ec);
 #elif defined(__SYMBIAN32__)
@@ -419,7 +419,7 @@ bool set_internal_non_blocking(socket_ty
   }
 
   clear_last_error();
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   ioctl_arg_type arg = (value ? 1 : 0);
   int result = error_wrapper(::ioctlsocket(s, FIONBIO, &arg), ec);
 #elif defined(__SYMBIAN32__)
@@ -560,7 +560,6 @@ bool non_blocking_connect(socket_type s,
   // Check if the connect operation has finished. This is required since we may
   // get spurious readiness notifications from the reactor.
 #if defined(BOOST_ASIO_WINDOWS) \
-  || defined(__CYGWIN__) \
   || defined(__SYMBIAN32__)
   fd_set write_fds;
   FD_ZERO(&write_fds);
@@ -573,7 +572,6 @@ bool non_blocking_connect(socket_type s,
   zero_timeout.tv_usec = 0;
   int ready = ::select(s + 1, 0, &write_fds, &except_fds, &zero_timeout);
 #else // defined(BOOST_ASIO_WINDOWS)
-      // || defined(__CYGWIN__)
       // || defined(__SYMBIAN32__)
   pollfd fds;
   fds.fd = s;
@@ -581,7 +579,6 @@ bool non_blocking_connect(socket_type s,
   fds.revents = 0;
   int ready = ::poll(&fds, 1, 0);
 #endif // defined(BOOST_ASIO_WINDOWS)
-       // || defined(__CYGWIN__)
        // || defined(__SYMBIAN32__)
   if (ready == 0)
   {
@@ -610,7 +607,7 @@ bool non_blocking_connect(socket_type s,
 int socketpair(int af, int type, int protocol,
     socket_type sv[2], boost::system::error_code& ec)
 {
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   (void)(af);
   (void)(type);
   (void)(protocol);
@@ -636,11 +633,11 @@ bool sockatmark(socket_type s, boost::sy
 
 #if defined(SIOCATMARK)
   ioctl_arg_type value = 0;
-# if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+# if defined(BOOST_ASIO_WINDOWS)
   int result = error_wrapper(::ioctlsocket(s, SIOCATMARK, &value), ec);
-# else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+# else // defined(BOOST_ASIO_WINDOWS)
   int result = error_wrapper(::ioctl(s, SIOCATMARK, &value), ec);
-# endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+# endif // defined(BOOST_ASIO_WINDOWS)
   if (result == 0)
     ec = boost::system::error_code();
 # if defined(ENOTTY)
@@ -665,11 +662,11 @@ size_t available(socket_type s, boost::s
   }
 
   ioctl_arg_type value = 0;
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   int result = error_wrapper(::ioctlsocket(s, FIONREAD, &value), ec);
-#else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#else // defined(BOOST_ASIO_WINDOWS)
   int result = error_wrapper(::ioctl(s, FIONREAD, &value), ec);
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
   if (result == 0)
     ec = boost::system::error_code();
 #if defined(ENOTTY)
@@ -706,32 +703,32 @@ inline void init_buf_iov_base(T& base, v
   base = static_cast<T>(addr);
 }
 
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
 typedef WSABUF buf;
-#else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#else // defined(BOOST_ASIO_WINDOWS)
 typedef iovec buf;
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 
 void init_buf(buf& b, void* data, size_t size)
 {
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   b.buf = static_cast<char*>(data);
   b.len = static_cast<u_long>(size);
-#else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#else // defined(BOOST_ASIO_WINDOWS)
   init_buf_iov_base(b.iov_base, data);
   b.iov_len = size;
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 }
 
 void init_buf(buf& b, const void* data, size_t size)
 {
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   b.buf = static_cast<char*>(const_cast<void*>(data));
   b.len = static_cast<u_long>(size);
-#else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#else // defined(BOOST_ASIO_WINDOWS)
   init_buf_iov_base(b.iov_base, const_cast<void*>(data));
   b.iov_len = size;
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 }
 
 inline void init_msghdr_msg_name(void*& name, socket_addr_type* addr)
@@ -760,7 +757,7 @@ signed_size_type recv(socket_type s, buf
     int flags, boost::system::error_code& ec)
 {
   clear_last_error();
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   // Receive some data.
   DWORD recv_buf_count = static_cast<DWORD>(count);
   DWORD bytes_transferred = 0;
@@ -777,7 +774,7 @@ signed_size_type recv(socket_type s, buf
     return socket_error_retval;
   ec = boost::system::error_code();
   return bytes_transferred;
-#else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#else // defined(BOOST_ASIO_WINDOWS)
   msghdr msg = msghdr();
   msg.msg_iov = bufs;
   msg.msg_iovlen = static_cast<int>(count);
@@ -785,7 +782,7 @@ signed_size_type recv(socket_type s, buf
   if (result >= 0)
     ec = boost::system::error_code();
   return result;
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 }
 
 size_t sync_recv(socket_type s, state_type state, buf* bufs,
@@ -912,7 +909,7 @@ signed_size_type recvfrom(socket_type s,
     boost::system::error_code& ec)
 {
   clear_last_error();
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   // Receive some data.
   DWORD recv_buf_count = static_cast<DWORD>(count);
   DWORD bytes_transferred = 0;
@@ -931,7 +928,7 @@ signed_size_type recvfrom(socket_type s,
     return socket_error_retval;
   ec = boost::system::error_code();
   return bytes_transferred;
-#else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#else // defined(BOOST_ASIO_WINDOWS)
   msghdr msg = msghdr();
   init_msghdr_msg_name(msg.msg_name, addr);
   msg.msg_namelen = static_cast<int>(*addrlen);
@@ -942,7 +939,7 @@ signed_size_type recvfrom(socket_type s,
   if (result >= 0)
     ec = boost::system::error_code();
   return result;
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 }
 
 size_t sync_recvfrom(socket_type s, state_type state, buf* bufs,
@@ -1043,10 +1040,10 @@ signed_size_type recvmsg(socket_type s,
     int in_flags, int& out_flags, boost::system::error_code& ec)
 {
   clear_last_error();
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   out_flags = 0;
   return socket_ops::recv(s, bufs, count, in_flags, ec);
-#else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#else // defined(BOOST_ASIO_WINDOWS)
   msghdr msg = msghdr();
   msg.msg_iov = bufs;
   msg.msg_iovlen = static_cast<int>(count);
@@ -1059,7 +1056,7 @@ signed_size_type recvmsg(socket_type s,
   else
     out_flags = 0;
   return result;
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 }
 
 size_t sync_recvmsg(socket_type s, state_type state,
@@ -1159,7 +1156,7 @@ signed_size_type send(socket_type s, con
     int flags, boost::system::error_code& ec)
 {
   clear_last_error();
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   // Send the data.
   DWORD send_buf_count = static_cast<DWORD>(count);
   DWORD bytes_transferred = 0;
@@ -1174,7 +1171,7 @@ signed_size_type send(socket_type s, con
     return socket_error_retval;
   ec = boost::system::error_code();
   return bytes_transferred;
-#else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#else // defined(BOOST_ASIO_WINDOWS)
   msghdr msg = msghdr();
   msg.msg_iov = const_cast<buf*>(bufs);
   msg.msg_iovlen = static_cast<int>(count);
@@ -1185,7 +1182,7 @@ signed_size_type send(socket_type s, con
   if (result >= 0)
     ec = boost::system::error_code();
   return result;
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 }
 
 size_t sync_send(socket_type s, state_type state, const buf* bufs,
@@ -1286,7 +1283,7 @@ signed_size_type sendto(socket_type s, c
     boost::system::error_code& ec)
 {
   clear_last_error();
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   // Send the data.
   DWORD send_buf_count = static_cast<DWORD>(count);
   DWORD bytes_transferred = 0;
@@ -1301,7 +1298,7 @@ signed_size_type sendto(socket_type s, c
     return socket_error_retval;
   ec = boost::system::error_code();
   return bytes_transferred;
-#else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#else // defined(BOOST_ASIO_WINDOWS)
   msghdr msg = msghdr();
   init_msghdr_msg_name(msg.msg_name, addr);
   msg.msg_namelen = static_cast<int>(addrlen);
@@ -1314,7 +1311,7 @@ signed_size_type sendto(socket_type s, c
   if (result >= 0)
     ec = boost::system::error_code();
   return result;
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 }
 
 size_t sync_sendto(socket_type s, state_type state, const buf* bufs,
@@ -1391,7 +1388,7 @@ socket_type socket(int af, int type, int
     boost::system::error_code& ec)
 {
   clear_last_error();
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   socket_type s = error_wrapper(::WSASocketW(af, type, protocol, 0, 0,
         WSA_FLAG_OVERLAPPED), ec);
   if (s == invalid_socket)
@@ -1589,7 +1586,7 @@ int getsockopt(socket_type s, state_type
   }
   ec = boost::asio::error::fault;
   return socket_error_retval;
-#elif defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#elif defined(BOOST_ASIO_WINDOWS)
   clear_last_error();
   int result = error_wrapper(call_getsockopt(&msghdr::msg_namelen,
         s, level, optname, optval, optlen), ec);
@@ -1607,7 +1604,7 @@ int getsockopt(socket_type s, state_type
   if (result == 0)
     ec = boost::system::error_code();
   return result;
-#else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#else // defined(BOOST_ASIO_WINDOWS)
   clear_last_error();
   int result = error_wrapper(call_getsockopt(&msghdr::msg_namelen,
         s, level, optname, optval, optlen), ec);
@@ -1626,7 +1623,7 @@ int getsockopt(socket_type s, state_type
   if (result == 0)
     ec = boost::system::error_code();
   return result;
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 }
 
 template <typename SockLenType>
@@ -1648,8 +1645,7 @@ int getpeername(socket_type s, socket_ad
     return socket_error_retval;
   }
 
-#if defined(BOOST_ASIO_WINDOWS) && !defined(BOOST_ASIO_WINDOWS_APP) \
-  || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS) && !defined(BOOST_ASIO_WINDOWS_APP)
   if (cached)
   {
     // Check if socket is still connected.
@@ -1671,10 +1667,8 @@ int getpeername(socket_type s, socket_ad
     return 0;
   }
 #else // defined(BOOST_ASIO_WINDOWS) && !defined(BOOST_ASIO_WINDOWS_APP)
-      // || defined(__CYGWIN__)
   (void)cached;
 #endif // defined(BOOST_ASIO_WINDOWS) && !defined(BOOST_ASIO_WINDOWS_APP)
-       // || defined(__CYGWIN__)
 
   clear_last_error();
   int result = error_wrapper(call_getpeername(
@@ -1721,7 +1715,7 @@ int ioctl(socket_type s, state_type& sta
   }
 
   clear_last_error();
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   int result = error_wrapper(::ioctlsocket(s, cmd, arg), ec);
 #elif defined(__MACH__) && defined(__APPLE__) \
   || defined(__NetBSD__) || defined(__FreeBSD__) || defined(__OpenBSD__)
@@ -1762,7 +1756,7 @@ int select(int nfds, fd_set* readfds, fd
     fd_set* exceptfds, timeval* timeout, boost::system::error_code& ec)
 {
   clear_last_error();
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   if (!readfds && !writefds && !exceptfds && timeout)
   {
     DWORD milliseconds = timeout->tv_sec * 1000 + timeout->tv_usec / 1000;
@@ -1782,7 +1776,7 @@ int select(int nfds, fd_set* readfds, fd
   if (timeout && timeout->tv_sec == 0
       && timeout->tv_usec > 0 && timeout->tv_usec < 1000)
     timeout->tv_usec = 1000;
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 
 #if defined(__hpux) && defined(__SELECT)
   timespec ts;
@@ -1809,7 +1803,6 @@ int poll_read(socket_type s, state_type
   }
 
 #if defined(BOOST_ASIO_WINDOWS) \
-  || defined(__CYGWIN__) \
   || defined(__SYMBIAN32__)
   fd_set fds;
   FD_ZERO(&fds);
@@ -1833,7 +1826,6 @@ int poll_read(socket_type s, state_type
   clear_last_error();
   int result = error_wrapper(::select(s + 1, &fds, 0, 0, timeout), ec);
 #else // defined(BOOST_ASIO_WINDOWS)
-      // || defined(__CYGWIN__)
       // || defined(__SYMBIAN32__)
   pollfd fds;
   fds.fd = s;
@@ -1843,7 +1835,6 @@ int poll_read(socket_type s, state_type
   clear_last_error();
   int result = error_wrapper(::poll(&fds, 1, timeout), ec);
 #endif // defined(BOOST_ASIO_WINDOWS)
-       // || defined(__CYGWIN__)
        // || defined(__SYMBIAN32__)
   if (result == 0)
     ec = (state & user_set_non_blocking)
@@ -1863,7 +1854,6 @@ int poll_write(socket_type s, state_type
   }
 
 #if defined(BOOST_ASIO_WINDOWS) \
-  || defined(__CYGWIN__) \
   || defined(__SYMBIAN32__)
   fd_set fds;
   FD_ZERO(&fds);
@@ -1887,7 +1877,6 @@ int poll_write(socket_type s, state_type
   clear_last_error();
   int result = error_wrapper(::select(s + 1, 0, &fds, 0, timeout), ec);
 #else // defined(BOOST_ASIO_WINDOWS)
-      // || defined(__CYGWIN__)
       // || defined(__SYMBIAN32__)
   pollfd fds;
   fds.fd = s;
@@ -1897,7 +1886,6 @@ int poll_write(socket_type s, state_type
   clear_last_error();
   int result = error_wrapper(::poll(&fds, 1, timeout), ec);
 #endif // defined(BOOST_ASIO_WINDOWS)
-       // || defined(__CYGWIN__)
        // || defined(__SYMBIAN32__)
   if (result == 0)
     ec = (state & user_set_non_blocking)
@@ -1917,7 +1905,6 @@ int poll_error(socket_type s, state_type
   }
 
 #if defined(BOOST_ASIO_WINDOWS) \
-  || defined(__CYGWIN__) \
   || defined(__SYMBIAN32__)
   fd_set fds;
   FD_ZERO(&fds);
@@ -1941,7 +1928,6 @@ int poll_error(socket_type s, state_type
   clear_last_error();
   int result = error_wrapper(::select(s + 1, 0, 0, &fds, timeout), ec);
 #else // defined(BOOST_ASIO_WINDOWS)
-      // || defined(__CYGWIN__)
       // || defined(__SYMBIAN32__)
   pollfd fds;
   fds.fd = s;
@@ -1951,7 +1937,6 @@ int poll_error(socket_type s, state_type
   clear_last_error();
   int result = error_wrapper(::poll(&fds, 1, timeout), ec);
 #endif // defined(BOOST_ASIO_WINDOWS)
-       // || defined(__CYGWIN__)
        // || defined(__SYMBIAN32__)
   if (result == 0)
     ec = (state & user_set_non_blocking)
@@ -1970,7 +1955,6 @@ int poll_connect(socket_type s, int msec
   }
 
 #if defined(BOOST_ASIO_WINDOWS) \
-  || defined(__CYGWIN__) \
   || defined(__SYMBIAN32__)
   fd_set write_fds;
   FD_ZERO(&write_fds);
@@ -1995,7 +1979,6 @@ int poll_connect(socket_type s, int msec
     ec = boost::system::error_code();
   return result;
 #else // defined(BOOST_ASIO_WINDOWS)
-      // || defined(__CYGWIN__)
       // || defined(__SYMBIAN32__)
   pollfd fds;
   fds.fd = s;
@@ -2007,7 +1990,6 @@ int poll_connect(socket_type s, int msec
     ec = boost::system::error_code();
   return result;
 #endif // defined(BOOST_ASIO_WINDOWS)
-       // || defined(__CYGWIN__)
        // || defined(__SYMBIAN32__)
 }
 
@@ -2052,7 +2034,7 @@ const char* inet_ntop(int af, const void
     ec = boost::asio::error::address_family_not_supported;
     return 0;
   }
-#elif defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#elif defined(BOOST_ASIO_WINDOWS)
   using namespace std; // For memcpy.
 
   if (af != BOOST_ASIO_OS_DEF(AF_INET) && af != BOOST_ASIO_OS_DEF(AF_INET6))
@@ -2107,7 +2089,7 @@ const char* inet_ntop(int af, const void
     ec = boost::asio::error::invalid_argument;
 
   return result == socket_error_retval ? 0 : dest;
-#else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#else // defined(BOOST_ASIO_WINDOWS)
   const char* result = error_wrapper(::inet_ntop(
         af, src, dest, static_cast<int>(length)), ec);
   if (result == 0 && !ec)
@@ -2127,7 +2109,7 @@ const char* inet_ntop(int af, const void
     strcat(dest, if_name);
   }
   return result;
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 }
 
 int inet_pton(int af, const char* src, void* dest,
@@ -2278,7 +2260,7 @@ int inet_pton(int af, const char* src, v
     ec = boost::asio::error::address_family_not_supported;
     return -1;
   }
-#elif defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#elif defined(BOOST_ASIO_WINDOWS)
   using namespace std; // For memcpy and strcmp.
 
   if (af != BOOST_ASIO_OS_DEF(AF_INET) && af != BOOST_ASIO_OS_DEF(AF_INET6))
@@ -2338,7 +2320,7 @@ int inet_pton(int af, const char* src, v
     ec = boost::system::error_code();
 
   return result == socket_error_retval ? -1 : 1;
-#else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#else // defined(BOOST_ASIO_WINDOWS)
   using namespace std; // For strchr, memcpy and atoi.
 
   // On some platforms, inet_pton fails if an address string contains a scope
@@ -2380,7 +2362,7 @@ int inet_pton(int af, const char* src, v
     }
   }
   return result;
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 }
 
 int gethostname(char* name, int namelen, boost::system::error_code& ec)
@@ -2456,7 +2438,7 @@ inline hostent* gethostbyaddr(const char
     hostent* result, char* buffer, int buflength, boost::system::error_code& ec)
 {
   clear_last_error();
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   (void)(buffer);
   (void)(buflength);
   hostent* retval = error_wrapper(::gethostbyaddr(addr, length, af), ec);
@@ -2499,7 +2481,7 @@ inline hostent* gethostbyname(const char
     char* buffer, int buflength, int ai_flags, boost::system::error_code& ec)
 {
   clear_last_error();
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   (void)(buffer);
   (void)(buflength);
   (void)(ai_flags);
@@ -3300,7 +3282,7 @@ inline boost::system::error_code transla
   case EAI_SOCKTYPE:
     return boost::asio::error::socket_type_not_supported;
   default: // Possibly the non-portable EAI_SYSTEM.
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
     return boost::system::error_code(
         WSAGetLastError(), boost::asio::error::get_system_category());
 #else
@@ -3317,7 +3299,7 @@ boost::system::error_code getaddrinfo(co
   host = (host && *host) ? host : 0;
   service = (service && *service) ? service : 0;
   clear_last_error();
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
 # if defined(BOOST_ASIO_HAS_GETADDRINFO)
   // Building for Windows XP, Windows Server 2003, or later.
   int error = ::getaddrinfo(host, service, &hints, result);
@@ -3391,7 +3373,7 @@ boost::system::error_code background_get
 
 void freeaddrinfo(addrinfo_type* ai)
 {
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
 # if defined(BOOST_ASIO_HAS_GETADDRINFO)
   // Building for Windows XP, Windows Server 2003, or later.
   ::freeaddrinfo(ai);
@@ -3419,7 +3401,7 @@ boost::system::error_code getnameinfo(co
     std::size_t addrlen, char* host, std::size_t hostlen,
     char* serv, std::size_t servlen, int flags, boost::system::error_code& ec)
 {
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
 # if defined(BOOST_ASIO_HAS_GETADDRINFO)
   // Building for Windows XP, Windows Server 2003, or later.
   clear_last_error();
--- origsrc/boost_1_66_0/boost/asio/detail/impl/socket_select_interrupter.ipp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/impl/socket_select_interrupter.ipp	2018-04-08 23:08:14.555483100 -0500
@@ -20,7 +20,6 @@
 #if !defined(BOOST_ASIO_WINDOWS_RUNTIME)
 
 #if defined(BOOST_ASIO_WINDOWS) \
-  || defined(__CYGWIN__) \
   || defined(__SYMBIAN32__)
 
 #include <cstdlib>
@@ -170,7 +169,6 @@ bool socket_select_interrupter::reset()
 #include <boost/asio/detail/pop_options.hpp>
 
 #endif // defined(BOOST_ASIO_WINDOWS)
-       // || defined(__CYGWIN__)
        // || defined(__SYMBIAN32__)
 
 #endif // !defined(BOOST_ASIO_WINDOWS_RUNTIME)
--- origsrc/boost_1_66_0/boost/asio/detail/impl/winsock_init.ipp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/impl/winsock_init.ipp	2018-04-08 23:08:14.560485000 -0500
@@ -17,7 +17,7 @@
 
 #include <boost/asio/detail/config.hpp>
 
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
 
 #include <boost/asio/detail/socket_types.hpp>
 #include <boost/asio/detail/winsock_init.hpp>
@@ -79,6 +79,6 @@ void winsock_init_base::throw_on_error(d
 
 #include <boost/asio/detail/pop_options.hpp>
 
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 
 #endif // BOOST_ASIO_DETAIL_IMPL_WINSOCK_INIT_IPP
--- origsrc/boost_1_66_0/boost/asio/detail/local_free_on_block_exit.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/local_free_on_block_exit.hpp	2018-04-08 23:08:14.560983000 -0500
@@ -17,7 +17,7 @@
 
 #include <boost/asio/detail/config.hpp>
 
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
 #if !defined(BOOST_ASIO_WINDOWS_APP)
 
 #include <boost/asio/detail/noncopyable.hpp>
@@ -56,6 +56,6 @@ private:
 #include <boost/asio/detail/pop_options.hpp>
 
 #endif // !defined(BOOST_ASIO_WINDOWS_APP)
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 
 #endif // BOOST_ASIO_DETAIL_LOCAL_FREE_ON_BLOCK_EXIT_HPP
--- origsrc/boost_1_66_0/boost/asio/detail/null_signal_blocker.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/null_signal_blocker.hpp	2018-04-08 23:08:14.560983000 -0500
@@ -20,7 +20,6 @@
 #if !defined(BOOST_ASIO_HAS_THREADS) \
   || defined(BOOST_ASIO_WINDOWS) \
   || defined(BOOST_ASIO_WINDOWS_RUNTIME) \
-  || defined(__CYGWIN__) \
   || defined(__SYMBIAN32__)
 
 #include <boost/asio/detail/noncopyable.hpp>
@@ -65,7 +64,6 @@ public:
 #endif // !defined(BOOST_ASIO_HAS_THREADS)
        // || defined(BOOST_ASIO_WINDOWS)
        // || defined(BOOST_ASIO_WINDOWS_RUNTIME)
-       // || defined(__CYGWIN__)
        // || defined(__SYMBIAN32__)
 
 #endif // BOOST_ASIO_DETAIL_NULL_SIGNAL_BLOCKER_HPP
--- origsrc/boost_1_66_0/boost/asio/detail/old_win_sdk_compat.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/old_win_sdk_compat.hpp	2018-04-08 23:08:14.560983000 -0500
@@ -17,7 +17,7 @@
 
 #include <boost/asio/detail/config.hpp>
 
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
 
 // Guess whether we are building against on old Platform SDK.
 #if !defined(IN6ADDR_ANY_INIT)
@@ -211,6 +211,6 @@ struct addrinfo_emulation
 # define IPPROTO_ICMPV6 58
 #endif
 
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 
 #endif // BOOST_ASIO_DETAIL_OLD_WIN_SDK_COMPAT_HPP
--- origsrc/boost_1_66_0/boost/asio/detail/pipe_select_interrupter.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/pipe_select_interrupter.hpp	2018-04-08 23:08:14.576624400 -0500
@@ -19,7 +19,6 @@
 
 #if !defined(BOOST_ASIO_WINDOWS)
 #if !defined(BOOST_ASIO_WINDOWS_RUNTIME)
-#if !defined(__CYGWIN__)
 #if !defined(__SYMBIAN32__)
 #if !defined(BOOST_ASIO_HAS_EVENTFD)
 
@@ -84,7 +83,6 @@ private:
 
 #endif // !defined(BOOST_ASIO_HAS_EVENTFD)
 #endif // !defined(__SYMBIAN32__)
-#endif // !defined(__CYGWIN__)
 #endif // !defined(BOOST_ASIO_WINDOWS_RUNTIME)
 #endif // !defined(BOOST_ASIO_WINDOWS)
 
--- origsrc/boost_1_66_0/boost/asio/detail/posix_fd_set_adapter.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/posix_fd_set_adapter.hpp	2018-04-08 23:08:14.576624400 -0500
@@ -18,7 +18,6 @@
 #include <boost/asio/detail/config.hpp>
 
 #if !defined(BOOST_ASIO_WINDOWS) \
-  && !defined(__CYGWIN__) \
   && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
 
 #include <cstring>
@@ -114,7 +113,6 @@ private:
 #include <boost/asio/detail/pop_options.hpp>
 
 #endif // !defined(BOOST_ASIO_WINDOWS)
-       // && !defined(__CYGWIN__)
        // && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
 
 #endif // BOOST_ASIO_DETAIL_POSIX_FD_SET_ADAPTER_HPP
--- origsrc/boost_1_66_0/boost/asio/detail/reactive_descriptor_service.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/reactive_descriptor_service.hpp	2018-04-08 23:08:14.576624400 -0500
@@ -18,8 +18,7 @@
 #include <boost/asio/detail/config.hpp>
 
 #if !defined(BOOST_ASIO_WINDOWS) \
-  && !defined(BOOST_ASIO_WINDOWS_RUNTIME) \
-  && !defined(__CYGWIN__)
+  && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
 
 #include <boost/asio/buffer.hpp>
 #include <boost/asio/io_context.hpp>
@@ -385,6 +384,5 @@ private:
 
 #endif // !defined(BOOST_ASIO_WINDOWS)
        //   && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
-       //   && !defined(__CYGWIN__)
 
 #endif // BOOST_ASIO_DETAIL_REACTIVE_DESCRIPTOR_SERVICE_HPP
--- origsrc/boost_1_66_0/boost/asio/detail/reactive_serial_port_service.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/reactive_serial_port_service.hpp	2018-04-08 23:08:14.576624400 -0500
@@ -19,7 +19,7 @@
 #include <boost/asio/detail/config.hpp>
 
 #if defined(BOOST_ASIO_HAS_SERIAL_PORT)
-#if !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#if !defined(BOOST_ASIO_WINDOWS)
 
 #include <string>
 #include <boost/asio/error.hpp>
@@ -232,7 +232,7 @@ private:
 # include <boost/asio/detail/impl/reactive_serial_port_service.ipp>
 #endif // defined(BOOST_ASIO_HEADER_ONLY)
 
-#endif // !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#endif // !defined(BOOST_ASIO_WINDOWS)
 #endif // defined(BOOST_ASIO_HAS_SERIAL_PORT)
 
 #endif // BOOST_ASIO_DETAIL_REACTIVE_SERIAL_PORT_SERVICE_HPP
--- origsrc/boost_1_66_0/boost/asio/detail/select_interrupter.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/select_interrupter.hpp	2018-04-08 23:08:14.592250700 -0500
@@ -19,7 +19,7 @@
 
 #if !defined(BOOST_ASIO_WINDOWS_RUNTIME)
 
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__) || defined(__SYMBIAN32__)
+#if defined(BOOST_ASIO_WINDOWS) || defined(__SYMBIAN32__)
 # include <boost/asio/detail/socket_select_interrupter.hpp>
 #elif defined(BOOST_ASIO_HAS_EVENTFD)
 # include <boost/asio/detail/eventfd_select_interrupter.hpp>
@@ -31,7 +31,7 @@ namespace boost {
 namespace asio {
 namespace detail {
 
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__) || defined(__SYMBIAN32__)
+#if defined(BOOST_ASIO_WINDOWS) || defined(__SYMBIAN32__)
 typedef socket_select_interrupter select_interrupter;
 #elif defined(BOOST_ASIO_HAS_EVENTFD)
 typedef eventfd_select_interrupter select_interrupter;
--- origsrc/boost_1_66_0/boost/asio/detail/select_reactor.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/select_reactor.hpp	2018-04-08 23:08:14.592250700 -0500
@@ -51,13 +51,13 @@ class select_reactor
   : public execution_context_service_base<select_reactor>
 {
 public:
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   enum op_types { read_op = 0, write_op = 1, except_op = 2,
     max_select_ops = 3, connect_op = 3, max_ops = 4 };
-#else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#else // defined(BOOST_ASIO_WINDOWS)
   enum op_types { read_op = 0, write_op = 1, except_op = 2,
     max_select_ops = 3, connect_op = 1, max_ops = 3 };
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 
   // Per-descriptor data.
   struct per_descriptor_data
--- origsrc/boost_1_66_0/boost/asio/detail/signal_blocker.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/signal_blocker.hpp	2018-04-08 23:08:14.592250700 -0500
@@ -19,7 +19,7 @@
 
 #if !defined(BOOST_ASIO_HAS_THREADS) || defined(BOOST_ASIO_WINDOWS) \
   || defined(BOOST_ASIO_WINDOWS_RUNTIME) \
-  || defined(__CYGWIN__) || defined(__SYMBIAN32__)
+  || defined(__SYMBIAN32__)
 # include <boost/asio/detail/null_signal_blocker.hpp>
 #elif defined(BOOST_ASIO_HAS_PTHREADS)
 # include <boost/asio/detail/posix_signal_blocker.hpp>
@@ -33,7 +33,7 @@ namespace detail {
 
 #if !defined(BOOST_ASIO_HAS_THREADS) || defined(BOOST_ASIO_WINDOWS) \
   || defined(BOOST_ASIO_WINDOWS_RUNTIME) \
-  || defined(__CYGWIN__) || defined(__SYMBIAN32__)
+  || defined(__SYMBIAN32__)
 typedef null_signal_blocker signal_blocker;
 #elif defined(BOOST_ASIO_HAS_PTHREADS)
 typedef posix_signal_blocker signal_blocker;
--- origsrc/boost_1_66_0/boost/asio/detail/signal_init.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/signal_init.hpp	2018-04-08 23:08:14.607867700 -0500
@@ -17,7 +17,7 @@
 
 #include <boost/asio/detail/config.hpp>
 
-#if !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#if !defined(BOOST_ASIO_WINDOWS)
 
 #include <csignal>
 
@@ -44,6 +44,6 @@ public:
 
 #include <boost/asio/detail/pop_options.hpp>
 
-#endif // !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#endif // !defined(BOOST_ASIO_WINDOWS)
 
 #endif // BOOST_ASIO_DETAIL_SIGNAL_INIT_HPP
--- origsrc/boost_1_66_0/boost/asio/detail/signal_set_service.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/signal_set_service.hpp	2018-04-08 23:08:14.607867700 -0500
@@ -28,9 +28,9 @@
 #include <boost/asio/detail/signal_op.hpp>
 #include <boost/asio/detail/socket_types.hpp>
 
-#if !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#if !defined(BOOST_ASIO_WINDOWS)
 # include <boost/asio/detail/reactor.hpp>
-#endif // !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#endif // !defined(BOOST_ASIO_WINDOWS)
 
 #include <boost/asio/detail/push_options.hpp>
 
@@ -184,8 +184,7 @@ private:
   io_context_impl& io_context_;
 
 #if !defined(BOOST_ASIO_WINDOWS) \
-  && !defined(BOOST_ASIO_WINDOWS_RUNTIME) \
-  && !defined(__CYGWIN__)
+  && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
   // The type used for registering for pipe reactor notifications.
   class pipe_read_op;
 
@@ -196,7 +195,6 @@ private:
   reactor::per_descriptor_data reactor_data_;
 #endif // !defined(BOOST_ASIO_WINDOWS)
        //   && !defined(BOOST_ASIO_WINDOWS_RUNTIME)
-       //   && !defined(__CYGWIN__)
 
   // A mapping from signal number to the registered signal sets.
   registration* registrations_[max_signal_number];
--- origsrc/boost_1_66_0/boost/asio/detail/socket_ops.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/socket_ops.hpp	2018-04-08 23:08:14.607867700 -0500
@@ -127,11 +127,11 @@ BOOST_ASIO_DECL size_t available(socket_
 BOOST_ASIO_DECL int listen(socket_type s,
     int backlog, boost::system::error_code& ec);
 
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
 typedef WSABUF buf;
-#else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#else // defined(BOOST_ASIO_WINDOWS)
 typedef iovec buf;
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 
 BOOST_ASIO_DECL void init_buf(buf& b, void* data, size_t size);
 
--- origsrc/boost_1_66_0/boost/asio/detail/socket_select_interrupter.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/socket_select_interrupter.hpp	2018-04-08 23:08:14.607867700 -0500
@@ -20,7 +20,6 @@
 #if !defined(BOOST_ASIO_WINDOWS_RUNTIME)
 
 #if defined(BOOST_ASIO_WINDOWS) \
-  || defined(__CYGWIN__) \
   || defined(__SYMBIAN32__)
 
 #include <boost/asio/detail/socket_types.hpp>
@@ -85,7 +84,6 @@ private:
 #endif // defined(BOOST_ASIO_HEADER_ONLY)
 
 #endif // defined(BOOST_ASIO_WINDOWS)
-       // || defined(__CYGWIN__)
        // || defined(__SYMBIAN32__)
 
 #endif // !defined(BOOST_ASIO_WINDOWS_RUNTIME)
--- origsrc/boost_1_66_0/boost/asio/detail/socket_types.hpp	2018-04-02 16:10:16.140634900 -0500
+++ src/boost_1_66_0/boost/asio/detail/socket_types.hpp	2018-04-08 23:08:14.623493500 -0500
@@ -19,7 +19,7 @@
 
 #if defined(BOOST_ASIO_WINDOWS_RUNTIME)
 // Empty.
-#elif defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#elif defined(BOOST_ASIO_WINDOWS)
 # if defined(_WINSOCKAPI_) && !defined(_WINSOCK2API_)
 #  error WinSock.h has already been included
 # endif // defined(_WINSOCKAPI_) && !defined(_WINSOCK2API_)
@@ -179,7 +179,7 @@ typedef int signed_size_type;
 # define BOOST_ASIO_OS_DEF_AI_V4MAPPED 0x800
 # define BOOST_ASIO_OS_DEF_AI_ALL 0x100
 # define BOOST_ASIO_OS_DEF_AI_ADDRCONFIG 0x400
-#elif defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#elif defined(BOOST_ASIO_WINDOWS)
 typedef SOCKET socket_type;
 const SOCKET invalid_socket = INVALID_SOCKET;
 const int socket_error_retval = SOCKET_ERROR;
--- origsrc/boost_1_66_0/boost/asio/detail/win_fd_set_adapter.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/win_fd_set_adapter.hpp	2018-04-08 23:08:14.623493500 -0500
@@ -17,7 +17,7 @@
 
 #include <boost/asio/detail/config.hpp>
 
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
 
 #include <boost/asio/detail/noncopyable.hpp>
 #include <boost/asio/detail/reactor_op_queue.hpp>
@@ -146,6 +146,6 @@ private:
 
 #include <boost/asio/detail/pop_options.hpp>
 
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 
 #endif // BOOST_ASIO_DETAIL_WIN_FD_SET_ADAPTER_HPP
--- origsrc/boost_1_66_0/boost/asio/detail/winsock_init.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/detail/winsock_init.hpp	2018-04-08 23:08:14.623493500 -0500
@@ -17,7 +17,7 @@
 
 #include <boost/asio/detail/config.hpp>
 
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
 
 #include <boost/asio/detail/push_options.hpp>
 
@@ -125,6 +125,6 @@ static const winsock_init<>& winsock_ini
 # include <boost/asio/detail/impl/winsock_init.ipp>
 #endif // defined(BOOST_ASIO_HEADER_ONLY)
 
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
 
 #endif // BOOST_ASIO_DETAIL_WINSOCK_INIT_HPP
--- origsrc/boost_1_66_0/boost/asio/error.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/error.hpp	2018-04-08 23:08:14.623493500 -0500
@@ -20,7 +20,6 @@
 #include <boost/system/error_code.hpp>
 #include <boost/system/system_error.hpp>
 #if defined(BOOST_ASIO_WINDOWS) \
-  || defined(__CYGWIN__) \
   || defined(BOOST_ASIO_WINDOWS_RUNTIME)
 # include <winerror.h>
 #else
@@ -45,7 +44,7 @@
 # define BOOST_ASIO_NETDB_ERROR(e) __HRESULT_FROM_WIN32(WSA ## e)
 # define BOOST_ASIO_GETADDRINFO_ERROR(e) __HRESULT_FROM_WIN32(WSA ## e)
 # define BOOST_ASIO_WIN_OR_POSIX(e_win, e_posix) e_win
-#elif defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#elif defined(BOOST_ASIO_WINDOWS)
 # define BOOST_ASIO_NATIVE_ERROR(e) e
 # define BOOST_ASIO_SOCKET_ERROR(e) WSA ## e
 # define BOOST_ASIO_NETDB_ERROR(e) WSA ## e
@@ -230,7 +229,7 @@ inline const boost::system::error_catego
   return boost::system::system_category();
 }
 
-#if !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#if !defined(BOOST_ASIO_WINDOWS)
 
 extern BOOST_ASIO_DECL
 const boost::system::error_category& get_netdb_category();
@@ -238,7 +237,7 @@ const boost::system::error_category& get
 extern BOOST_ASIO_DECL
 const boost::system::error_category& get_addrinfo_category();
 
-#else // !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#else // !defined(BOOST_ASIO_WINDOWS)
 
 inline const boost::system::error_category& get_netdb_category()
 {
@@ -250,7 +249,7 @@ inline const boost::system::error_catego
   return get_system_category();
 }
 
-#endif // !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#endif // !defined(BOOST_ASIO_WINDOWS)
 
 extern BOOST_ASIO_DECL
 const boost::system::error_category& get_misc_category();
--- origsrc/boost_1_66_0/boost/asio/impl/error.ipp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/impl/error.ipp	2018-04-08 23:08:14.639118100 -0500
@@ -25,7 +25,7 @@ namespace boost {
 namespace asio {
 namespace error {
 
-#if !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#if !defined(BOOST_ASIO_WINDOWS)
 
 namespace detail {
 
@@ -87,7 +87,7 @@ const boost::system::error_category& get
   return instance;
 }
 
-#endif // !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#endif // !defined(BOOST_ASIO_WINDOWS)
 
 namespace detail {
 
--- origsrc/boost_1_66_0/boost/asio/impl/serial_port_base.ipp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/impl/serial_port_base.ipp	2018-04-08 23:08:14.639118100 -0500
@@ -27,7 +27,7 @@
 
 #if defined(GENERATING_DOCUMENTATION)
 # define BOOST_ASIO_OPTION_STORAGE implementation_defined
-#elif defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#elif defined(BOOST_ASIO_WINDOWS)
 # define BOOST_ASIO_OPTION_STORAGE DCB
 #else
 # define BOOST_ASIO_OPTION_STORAGE termios
@@ -41,7 +41,7 @@ namespace asio {
 BOOST_ASIO_SYNC_OP_VOID serial_port_base::baud_rate::store(
     BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
 {
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   storage.BaudRate = value_;
 #else
   speed_t baud;
@@ -128,7 +128,7 @@ BOOST_ASIO_SYNC_OP_VOID serial_port_base
 BOOST_ASIO_SYNC_OP_VOID serial_port_base::baud_rate::load(
     const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
 {
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   value_ = storage.BaudRate;
 #else
   speed_t baud = ::cfgetospeed(&storage);
@@ -221,7 +221,7 @@ serial_port_base::flow_control::flow_con
 BOOST_ASIO_SYNC_OP_VOID serial_port_base::flow_control::store(
     BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
 {
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   storage.fOutxCtsFlow = FALSE;
   storage.fOutxDsrFlow = FALSE;
   storage.fTXContinueOnXoff = TRUE;
@@ -288,7 +288,7 @@ BOOST_ASIO_SYNC_OP_VOID serial_port_base
 BOOST_ASIO_SYNC_OP_VOID serial_port_base::flow_control::load(
     const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
 {
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   if (storage.fOutX && storage.fInX)
   {
     value_ = software;
@@ -339,7 +339,7 @@ serial_port_base::parity::parity(serial_
 BOOST_ASIO_SYNC_OP_VOID serial_port_base::parity::store(
     BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
 {
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   switch (value_)
   {
   case none:
@@ -386,7 +386,7 @@ BOOST_ASIO_SYNC_OP_VOID serial_port_base
 BOOST_ASIO_SYNC_OP_VOID serial_port_base::parity::load(
     const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
 {
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   if (storage.Parity == EVENPARITY)
   {
     value_ = even;
@@ -434,7 +434,7 @@ serial_port_base::stop_bits::stop_bits(
 BOOST_ASIO_SYNC_OP_VOID serial_port_base::stop_bits::store(
     BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
 {
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   switch (value_)
   {
   case one:
@@ -470,7 +470,7 @@ BOOST_ASIO_SYNC_OP_VOID serial_port_base
 BOOST_ASIO_SYNC_OP_VOID serial_port_base::stop_bits::load(
     const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
 {
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   if (storage.StopBits == ONESTOPBIT)
   {
     value_ = one;
@@ -507,7 +507,7 @@ serial_port_base::character_size::charac
 BOOST_ASIO_SYNC_OP_VOID serial_port_base::character_size::store(
     BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
 {
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   storage.ByteSize = value_;
 #else
   storage.c_cflag &= ~CSIZE;
@@ -527,7 +527,7 @@ BOOST_ASIO_SYNC_OP_VOID serial_port_base
 BOOST_ASIO_SYNC_OP_VOID serial_port_base::character_size::load(
     const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
 {
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   value_ = storage.ByteSize;
 #else
   if ((storage.c_cflag & CSIZE) == CS5) { value_ = 5; }
--- origsrc/boost_1_66_0/boost/asio/io_context.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/io_context.hpp	2018-04-08 23:05:24.107194600 -0500
@@ -29,7 +29,7 @@
 # include <boost/asio/detail/chrono.hpp>
 #endif // defined(BOOST_ASIO_HAS_CHRONO)
 
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
 # include <boost/asio/detail/winsock_init.hpp>
 #elif defined(__sun) || defined(__QNX__) || defined(__hpux) || defined(_AIX) \
   || defined(__osf__)
@@ -603,7 +603,7 @@ private:
   template <typename Service>
   friend Service& use_service(io_context& ioc);
 
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
   detail::winsock_init<> init_;
 #elif defined(__sun) || defined(__QNX__) || defined(__hpux) || defined(_AIX) \
   || defined(__osf__)
--- origsrc/boost_1_66_0/boost/asio/serial_port_base.hpp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/serial_port_base.hpp	2018-04-08 23:08:14.639118100 -0500
@@ -21,16 +21,16 @@
 #if defined(BOOST_ASIO_HAS_SERIAL_PORT) \
   || defined(GENERATING_DOCUMENTATION)
 
-#if !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#if !defined(BOOST_ASIO_WINDOWS)
 # include <termios.h>
-#endif // !defined(BOOST_ASIO_WINDOWS) && !defined(__CYGWIN__)
+#endif // !defined(BOOST_ASIO_WINDOWS)
 
 #include <boost/asio/detail/socket_types.hpp>
 #include <boost/system/error_code.hpp>
 
 #if defined(GENERATING_DOCUMENTATION)
 # define BOOST_ASIO_OPTION_STORAGE implementation_defined
-#elif defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#elif defined(BOOST_ASIO_WINDOWS)
 # define BOOST_ASIO_OPTION_STORAGE DCB
 #else
 # define BOOST_ASIO_OPTION_STORAGE termios
--- origsrc/boost_1_66_0/boost/asio/ssl/detail/impl/openssl_init.ipp	2017-12-13 17:56:41.000000000 -0600
+++ src/boost_1_66_0/boost/asio/ssl/detail/impl/openssl_init.ipp	2018-04-08 23:08:14.659755300 -0500
@@ -107,13 +107,13 @@ private:
 #if (OPENSSL_VERSION_NUMBER < 0x10000000L)
   static unsigned long openssl_id_func()
   {
-#if defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#if defined(BOOST_ASIO_WINDOWS)
     return ::GetCurrentThreadId();
-#else // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#else // defined(BOOST_ASIO_WINDOWS)
     void* id = &errno;
     BOOST_ASIO_ASSERT(sizeof(unsigned long) >= sizeof(void*));
     return reinterpret_cast<unsigned long>(id);
-#endif // defined(BOOST_ASIO_WINDOWS) || defined(__CYGWIN__)
+#endif // defined(BOOST_ASIO_WINDOWS)
   }
 #endif // (OPENSSL_VERSION_NUMBER < 0x10000000L)
 
